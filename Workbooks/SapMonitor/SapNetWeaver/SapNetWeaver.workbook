{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "## Azure Monitor for SAP Solutions on SAP NetWeaver\n---"
      },
      "name": "Workbook Title"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "aa8ab18f-5d36-4f34-8a54-f0f2e25ecbb8",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_error",
            "type": 1,
            "query": "// 0 = no error\n// 1 = table does not exist (need to add provider)\n// 2 = table exists, but column v1 does not (need to wait)\nlet t = \"SapNetweaver_GetSystemInstanceList_CL\";\nlet c1 = \"hostname_s\";\nlet dummy = \"unmÃ¶glicher-wert!\";\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, records = -1 };\nlet checkRecords =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | summarize records = count()\n    )\n  | project records\n  | top 1 by records desc\n;\nlet checkTableExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | count\n      | extend miss = 0\n    )\n  | project miss\n  | limit 2\n  | top 1 by miss asc\n;\nlet checkColumnExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | extend miss = 0\n      | extend columnV1 = column_ifexists(c1, dummy)\n    )\n  | project miss, columnV1\n  | limit 2\n | top 1 by miss asc\n;\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != 1);\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\nlet tableRecords = toscalar(checkRecords | summarize max(records));\nlet x = iif(tableExists, iif(columnV1Exists, iif(tableRecords > 0, \"0\", \"2\"), \"2\"), \"1\");\nprint toscalar(x)",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "225baab0-e4ce-4a45-92de-ddda00795a2d",
            "version": "KqlParameterItem/1.0",
            "name": "param_ams_resource",
            "type": 5,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.hanaonazure/sapmonitors": true
              },
              "additionalResourceOptions": [
                "value::1"
              ]
            },
            "defaultValue": "value::1"
          },
          {
            "id": "92bd4772-a480-4a10-a48d-fecfd54bb22f",
            "version": "KqlParameterItem/1.0",
            "name": "param_providers_list",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{param_ams_resource}/providerInstances/\",\"urlParams\":[{\"key\":\"api-version\",\"value\":\"2020-02-07-preview\"},{\"key\":\"pageLimit\",\"value\":\"1000\"}],\"batchDisabled\":false,\"transformers\":null}",
            "queryType": 12
          },
          {
            "id": "90bcea9a-3fcb-4f45-b88c-98782c711569",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_rfc_metrics",
            "type": 1,
            "query": "// 0 = no error\n// 1 = table does not exist (need to enable RFC)\n// 2 = table exists, but column v1 does not (or) column v1 exists but no data in the table (need to wait)\nlet t = \"SapNetweaver_ShortDumps_CL\";\nlet c1 = \"SID_s\";\nlet dummy = \"unmÃ¶glicher-wert!\";\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, records = -1 };\nlet checkRecords =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | summarize records = count()\n    )\n  | project records\n  | top 1 by records desc\n;\nlet checkTableExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | count\n      | extend miss = 0\n    )\n  | project miss\n  | limit 2\n  | top 1 by miss asc\n;\nlet checkColumnExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | extend miss = 0\n      | extend columnV1 = column_ifexists(c1, dummy)\n    )\n  | project miss, columnV1\n  | limit 2\n  | top 1 by miss asc\n ;\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != 1);\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\nlet tableRecords = toscalar(checkRecords | summarize max(records));\nlet x = iif(tableExists, iif(columnV1Exists, iif(tableRecords > 0, \"0\", \"2\"), \"2\"), \"1\");\nprint toscalar(x)\n\n",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "param_check_provider_error",
            "type": 1,
            "query": "print allProviders=parse_json(tostring(\"{param_providers_list:escapejson}\")).value\r\n| mv-expand allProviders\r\n| extend type=parse_json(allProviders.properties).type\r\n| extend state=parse_json(allProviders.properties).provisioningState\r\n| where type==\"SapNetweaver\"\r\n| where state!=\"Failed\"\r\n| summarize iff(count() > 0,count(), -1)",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "id": "b7ac06af-cee4-4dc0-a5f7-7c118dca9922"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "dummy_neverset",
        "comparison": "isNotEqualTo"
      },
      "name": "overview_section_params"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Please add the SAP NetWeaver provider to view this workbook.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "NoProviderError"
          },
          {
            "type": 1,
            "content": {
              "json": "There was an error while adding the SAP NetWeaver provider. Please reach out to support for further assistance.",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "param_check_provider_error",
                "comparison": "isEqualTo",
                "value": "-1"
              },
              {
                "parameterName": "param_check_error",
                "comparison": "isEqualTo",
                "value": "0"
              }
            ],
            "name": "ProviderFailure"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "IngestionError"
          }
        ]
      },
      "name": "overview_group_error"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "810c5c3b-c12c-4ecc-a875-a7135a34af90",
            "cellValue": "selectedMenu",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "Overview",
            "style": "link"
          },
          {
            "id": "bd309ce8-c389-493f-961f-6fc4cfd718dd",
            "cellValue": "selectedMenu",
            "linkTarget": "parameter",
            "linkLabel": "Availability",
            "subTarget": "Availability",
            "style": "link"
          },
          {
            "id": "caa49a61-476e-4311-ad90-8d7bff8c5d88",
            "cellValue": "selectedMenu",
            "linkTarget": "parameter",
            "linkLabel": "Utilization",
            "subTarget": "Utilization",
            "style": "link"
          },
          {
            "id": "e844d4f7-2017-4360-824f-4ac26e8a941d",
            "cellValue": "selectedMenu",
            "linkTarget": "parameter",
            "linkLabel": "Enqueue Statistics",
            "subTarget": "EnqueueStatistics",
            "style": "link"
          },
          {
            "id": "718a2865-1736-41f9-91fe-b0084ecd795d",
            "cellValue": "selectedMenu",
            "linkTarget": "parameter",
            "linkLabel": "Queue Statistics",
            "subTarget": "QueueStatistics",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_provider_error",
          "comparison": "isNotEqualTo",
          "value": "-1"
        },
        {
          "parameterName": "param_check_rfc_metrics",
          "comparison": "isNotEqualTo",
          "value": "0"
        }
      ],
      "name": "Main Navigation Links"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "c69bbaf6-d2a9-4ebf-8985-a14e22643035",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "Overview",
            "style": "link"
          },
          {
            "id": "e3361f7f-1175-46da-b0b9-c39368c8b29b",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Availability",
            "subTarget": "Availability",
            "style": "link"
          },
          {
            "id": "166ff82a-8eb9-443c-b28c-12746c3b86e9",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Utilization",
            "subTarget": "Utilization",
            "style": "link"
          },
          {
            "id": "6a312e51-76b6-4afc-a948-1f22094c392e",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Enqueue Statistics",
            "subTarget": "EnqueueStatistics",
            "style": "link"
          },
          {
            "id": "0155da79-79b5-4e35-91d3-3aeb2ac640e8",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Queue Statistics",
            "subTarget": "QueueStatistics",
            "style": "link"
          },
          {
            "id": "0e04320b-60b3-463a-afc2-ff6546e574c7",
            "cellValue": "selectedMenuRFC",
            "linkTarget": "parameter",
            "linkLabel": "Application",
            "subTarget": "Application",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_provider_error",
          "comparison": "isNotEqualTo",
          "value": "-1"
        },
        {
          "parameterName": "param_check_rfc_metrics",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "Main Navigation Links - RFC"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "aa8ab18f-5d36-4f34-8a54-f0f2e25ecbb8",
            "version": "KqlParameterItem/1.0",
            "name": "SelectedTab",
            "type": 1,
            "query": "let selMenu = dynamic(\"{selectedMenu}\");\nlet selMenuRFC = dynamic(\"{selectedMenuRFC}\");\nlet rfcCheckParam = dynamic(\"{param_check_rfc_metrics}\");\nlet selTabValue = case(selMenu == \"Overview\", \"Overview\", \n                        selMenu == \"Availability\", \"Availability\" , \n                        selMenu == \"Utilization\", \"Utilization\" , \n                        selMenu == \"EnqueueStatistics\", \"EnqueueStatistics\" ,\n                        selMenu == \"QueueStatistics\", \"QueueStatistics\",    \n                        \"\");\nlet selTabRFCValue = case(selMenuRFC == \"Overview\", \"Overview\", \n                          selMenuRFC == \"Availability\", \"Availability\" ,\n                          selMenuRFC == \"Utilization\", \"Utilization\" , \n                          selMenuRFC == \"EnqueueStatistics\", \"EnqueueStatistics\" ,\n                          selMenuRFC == \"QueueStatistics\", \"QueueStatistics\" ,\n                          selMenuRFC == \"Application\", \"Application\" ,\n                          selMenuRFC == \"CPUMemoryUtilization\", \"CPUMemoryUtilization\" ,\n                            \"\");    \n\nlet chooseTab = iff((rfcCheckParam == 0),selTabRFCValue, selTabValue);\nprint toscalar(chooseTab);\n",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "dummy_neverset",
        "comparison": "isNotEqualTo"
      },
      "name": "SelectedTabParameter"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "1edcbbbd-b9a6-4ad5-9a56-3f34b3cbd58c",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_error_availability",
            "type": 1,
            "query": "// 0 = no error\n// 1 = table does not exist (need to add provider)\n// 2 = table exists, but column v1 does not (or) column v1 exists but no data in the table (need to wait)\nlet t = \"SapNetweaver_GetProcessList_CL\";\nlet c1 = \"hostname_s\";\nlet dummy = \"unmÃ¶glicher-wert!\";\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, records = -1 };\nlet checkRecords =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | summarize records = count()\n    )\n  | project records\n  | top 1 by records desc\n;\nlet checkTableExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | count\n      | extend miss = 0\n    )\n  | project miss\n  | limit 2\n  | top 1 by miss asc\n;\nlet checkColumnExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | extend miss = 0\n      | extend columnV1 = column_ifexists(c1, dummy)\n    )\n  | project miss, columnV1\n  | limit 2\n | top 1 by miss asc\n;\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != 1);\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\nlet tableRecords = toscalar(checkRecords | summarize max(records));\nlet x = iif(tableExists, iif(columnV1Exists, iif(tableRecords > 0, \"0\", \"2\"), \"2\"), \"1\");\nprint toscalar(x)\n",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Availability"
        },
        {
          "parameterName": "dummy_neverset",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "ErrorCheckAvailParam"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "loadType": "always",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let extractColumn = dynamic(['UTC Timestamp', 'Server Timestamp']);\r\nSapNetweaver_GetSystemInstanceList_CL\r\n| summarize ['UTC Timestamp'] = max(timestamp_t), ['Server Timestamp'] = max(serverTimestamp_t)\r\n| project properties = pack_all()\r\n| mv-apply name = extractColumn to typeof(string) on \r\n(\r\n    project name, value=properties[name]\r\n)\r\n| project-away properties",
              "size": 3,
              "title": "Current Status Updated At",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "value",
                  "formatter": 6,
                  "dateFormat": {
                    "showUtcTime": true,
                    "formatName": "fullDateTimePattern"
                  }
                },
                "subtitleContent": {
                  "columnMatch": "name",
                  "formatter": 1
                },
                "showBorder": false,
                "size": "auto"
              }
            },
            "name": "OverviewStatusDate"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "d18c71f4-04b3-4042-b8fb-b5cf3889cad1",
                  "cellValue": "valueSubTab",
                  "linkTarget": "parameter",
                  "linkLabel": "By SID",
                  "subTarget": "BySID",
                  "style": "link"
                },
                {
                  "id": "fdff6bdb-cbf1-4d88-a956-040063eb0a69",
                  "cellValue": "valueSubTab",
                  "linkTarget": "parameter",
                  "linkLabel": "By Application Server",
                  "subTarget": "ByApplicationServer",
                  "style": "link"
                }
              ]
            },
            "name": "OverviewNavigationLinks"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"1.0.0\",\"content\":\"[\\r\\n\\t{ \\\"Status\\\": \\\"Available\\\", \\\"Color\\\": 0 },\\r\\n\\t{ \\\"Status\\\": \\\"Not Functional\\\", \\\"Color\\\": 1 },\\r\\n\\t{ \\\"Status\\\": \\\"Error\\\", \\\"Color\\\": 2 },\\r\\n\\t{ \\\"Status\\\": \\\"Offline\\\", \\\"Color\\\": 3 },\\r\\n\\t{ \\\"Status\\\": \\\"Status Updated 5 Minutes Earlier\\\", \\\"Color\\\": 4 }\\r\\n\\r\\n]\",\"transformers\":null}",
              "size": 4,
              "title": "Chart Legend",
              "queryType": 8,
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 5
                },
                "leftContent": {
                  "columnMatch": "Status",
                  "formatter": 2,
                  "formatOptions": {
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": [
                        {
                          "columnName": "Color",
                          "color": "blue"
                        }
                      ]
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Color",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "colors",
                    "thresholdsGrid": [
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "representation": "green",
                        "text": ""
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "1",
                        "representation": "yellow",
                        "text": ""
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "2",
                        "representation": "red",
                        "text": ""
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "3",
                        "representation": "gray",
                        "text": ""
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "4",
                        "representation": "grayBlue",
                        "text": ""
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "blue",
                        "text": ""
                      }
                    ]
                  }
                },
                "showBorder": false,
                "size": "auto"
              }
            },
            "name": "Status Legend"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where serverTimestamp_t > ago(14d)\r\n| project dispstatus_s, SID_s, serverTimestamp_t\r\n| extend Status = iff(dispstatus_s == 'SAPControl-GREEN', \"Available\", \"\")\r\n| extend Status = iff(dispstatus_s == 'SAPControl-YELLOW', \"Not Functional\", Status)\r\n| extend Status = iff(dispstatus_s == 'SAPControl-RED', \"Error\", Status)\r\n| extend Status = iff(dispstatus_s == 'SAPControl-GRAY', \"Offline\", Status)\r\n| summarize arg_max(serverTimestamp_t, *) by SID_s\r\n| extend Status = iff(serverTimestamp_t > ago(5m), Status, \"Status Updated 5 mins earlier\")",
                    "size": 0,
                    "title": "SAP NetWeaver Availability Status By SID.",
                    "exportFieldName": "SID_s",
                    "exportParameterName": "selectedSID",
                    "exportDefaultValue": "*",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "graph",
                    "graphSettings": {
                      "type": 2,
                      "topContent": {
                        "formatter": 1
                      },
                      "centerContent": {
                        "columnMatch": "SID_s",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "[\"Status\"]"
                        }
                      },
                      "nodeIdField": "SID_s",
                      "graphOrientation": 3,
                      "showOrientationToggles": false,
                      "nodeSize": null,
                      "staticNodeSize": 70,
                      "colorSettings": {
                        "nodeColorField": "Status",
                        "type": 3,
                        "thresholdsGrid": [
                          {
                            "operator": "==",
                            "thresholdValue": "Available",
                            "representation": "green"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Not Functional",
                            "representation": "yellow"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Error",
                            "representation": "red"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Offline",
                            "representation": "gray"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Status Updated 5 mins earlier",
                            "representation": "grayBlue"
                          },
                          {
                            "operator": "Default",
                            "thresholdValue": null
                          }
                        ]
                      },
                      "hivesMargin": 5
                    }
                  },
                  "name": "Current Status by SID",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where serverTimestamp_t > ago(15m)\r\n| where SID_s == '{selectedSID}' or '*' == '{selectedSID}'\r\n| project-away hostname_s, instanceNr_d\r\n| extend Status = iff(dispstatus_s == 'SAPControl-GREEN', 0, iff(dispstatus_s == 'SAPControl-YELLOW', 1, iff(dispstatus_s == 'SAPControl-RED', 2, 3)))\r\n| summarize availability=countif(Status == 0), total=count() by SID_s, timestamp_t\r\n| extend availabilityPct = round(toreal(availability) / toreal(total) * 100, 3)\r\n| summarize availability=sum(availability), total=sum(total), availabilityTrend=make_list(availabilityPct) by SID_s\r\n| extend availability = round(toreal(availability) / toreal(total) * 100, 3)\r\n| project-away total",
                    "size": 0,
                    "title": "Availability Status",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "SID_s",
                          "formatter": 0,
                          "formatOptions": {
                            "customColumnWidthSetting": "10%"
                          }
                        },
                        {
                          "columnMatch": "availability",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "blueDark",
                            "aggregation": "Unique",
                            "customColumnWidthSetting": "20%"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "availabilityTrend",
                          "formatter": 21,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "green",
                            "customColumnWidthSetting": "75%"
                          },
                          "tooltipFormat": {
                            "tooltip": "[\"availability\"]"
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "SID_s",
                          "label": "SAP System"
                        },
                        {
                          "columnId": "availability",
                          "label": "Availability Over 15 Minutes"
                        },
                        {
                          "columnId": "availabilityTrend",
                          "label": "Trend"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "name": "Availability Percentage by SID - 15 minutes"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "valueSubTab",
              "comparison": "isEqualTo",
              "value": "BySID"
            },
            "name": "sidCurrentStatus"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "1665c0a1-800a-4d7a-baf7-1e6057d1813a",
                        "version": "KqlParameterItem/1.0",
                        "name": "selectedSID",
                        "label": "SID",
                        "type": 2,
                        "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where serverTimestamp_t > ago(14d)\r\n| project SID_s\r\n| distinct SID_s",
                        "value": null,
                        "typeSettings": {
                          "additionalResourceOptions": [],
                          "showDefault": false
                        },
                        "timeContext": {
                          "durationMs": 86400000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "SID parameters - Availability Status"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where serverTimestamp_t > ago(14d)\r\n| where SID_s == '{selectedSID}'\r\n| project instanceNr_d, hostname_s, serverTimestamp_t, features_s, dispstatus_s, SID_s\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend feature_label = iff(features_s has \"ABAP\", \"ABAP\", \"\")\r\n| extend feature_label = iff(features_s has \"J2EE\", \"J2EE\", feature_label)\r\n| extend feature_label = iff(features_s has \"ENQUE\", \"Enqueue Server\", feature_label)\r\n| extend Status = iff(dispstatus_s == 'SAPControl-GREEN', \"Available\", \"\")\r\n| extend Status = iff(dispstatus_s == 'SAPControl-YELLOW', \"Not Functional\", Status)\r\n| extend Status = iff(dispstatus_s == 'SAPControl-RED', \"Error\", Status)\r\n| extend Status = iff(dispstatus_s == 'SAPControl-GRAY', \"Offline\", Status)\r\n| extend appServer = strcat( hostname_s, \"_\", instanceNr_s)\r\n| summarize arg_max(serverTimestamp_t, *) by appServer\r\n| extend Status = iff(serverTimestamp_t > ago(5m), Status, \"Status Updated 5 mins earlier\")",
                    "size": 0,
                    "title": "SAP NetWeaver Availability Status by Application Server.",
                    "noDataMessage": "Please select an SID to view status.",
                    "exportedParameters": [
                      {
                        "fieldName": "hostname_s",
                        "parameterName": "selectedHostname",
                        "parameterType": 1,
                        "defaultValue": "*"
                      },
                      {
                        "fieldName": "instanceNr_d",
                        "parameterName": "selectedInstanceNr",
                        "parameterType": 1,
                        "defaultValue": "*"
                      },
                      {
                        "fieldName": "SID_s",
                        "parameterName": "selectedSID",
                        "parameterType": 1,
                        "defaultValue": "*"
                      }
                    ],
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "graph",
                    "graphSettings": {
                      "type": 2,
                      "topContent": {
                        "columnMatch": "SID_s",
                        "formatter": 1
                      },
                      "centerContent": {
                        "columnMatch": "appServer",
                        "formatter": 1,
                        "tooltipFormat": {
                          "tooltip": "[\"Status\"]"
                        }
                      },
                      "bottomContent": {
                        "columnMatch": "feature_label"
                      },
                      "nodeIdField": "appServer",
                      "graphOrientation": 3,
                      "showOrientationToggles": false,
                      "nodeSize": null,
                      "staticNodeSize": 100,
                      "colorSettings": {
                        "nodeColorField": "Status",
                        "type": 3,
                        "thresholdsGrid": [
                          {
                            "operator": "==",
                            "thresholdValue": "Available",
                            "representation": "green"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Not Functional",
                            "representation": "yellow"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Error",
                            "representation": "red"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Offline",
                            "representation": "gray"
                          },
                          {
                            "operator": "==",
                            "thresholdValue": "Status Updated 5 mins earlier",
                            "representation": "grayBlue"
                          },
                          {
                            "operator": "Default",
                            "thresholdValue": null
                          }
                        ]
                      },
                      "hivesMargin": 5
                    }
                  },
                  "name": "Current Status By AppServer",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "SapNetweaver_GetProcessList_CL\r\n| project Instance_Process = description_s, SID_s, hostname_s, instanceNr_d, dispstatus_s, serverTimestamp_t\r\n| where serverTimestamp_t > ago(15m)\r\n| where SID_s == '{selectedSID}'\r\n| where hostname_s == '{selectedHostname}'\r\n| where instanceNr_d == '{selectedInstanceNr}'\r\n| extend Status = iff(dispstatus_s == 'SAPControl-GREEN', 0, 1)\r\n| summarize total=count(), failureCount=countif(Status != 0) by Instance_Process, serverTimestamp_t\r\n| extend Availability = round(((toreal(total) - toreal(failureCount)) / toreal(total)) * 100, 2)\r\n| summarize Availability = avg(Availability), AvailabilityTrend = make_list(Availability) by Instance_Process",
                    "size": 1,
                    "title": "Process Availability (Last 15 mins)",
                    "noDataMessage": "No processes available for selected App Server.",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Availability",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "blue",
                            "customColumnWidthSetting": "15%"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        },
                        {
                          "columnMatch": "AvailabilityTrend",
                          "formatter": 21,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "green",
                            "customColumnWidthSetting": "75ch"
                          },
                          "tooltipFormat": {
                            "tooltip": "[\"Availability\"]"
                          }
                        },
                        {
                          "columnMatch": "total",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "failureCount",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Overall Availability %",
                          "formatter": 5,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"failureCount\"] of [\"total\"] mins unhealthy",
                              "columnSettings": [
                                {
                                  "columnName": "AvailableProcess",
                                  "color": "green"
                                },
                                {
                                  "columnName": "failureCount",
                                  "color": "redDark"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "AvailableProcess",
                          "formatter": 5
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "Instance_Process",
                          "label": "Instance Label"
                        },
                        {
                          "columnId": "AvailabilityTrend",
                          "label": "Availability Trend"
                        }
                      ]
                    }
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "selectedSID",
                      "comparison": "isNotEqualTo",
                      "value": "*"
                    },
                    {
                      "parameterName": "selectedHostname",
                      "comparison": "isNotEqualTo",
                      "value": "*"
                    }
                  ],
                  "name": "Process Availability Status"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "valueSubTab",
              "comparison": "isEqualTo",
              "value": "ByApplicationServer"
            },
            "name": "applicationServerOverview"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Overview"
        },
        {
          "parameterName": "param_check_error",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "param_check_provider_error",
          "comparison": "isNotEqualTo",
          "value": "-1"
        },
        {
          "parameterName": "param_check_error_availability",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "Overview"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Unable to create the required table (GetProcessList) to capture telemetry information. Please try after some time. If the issue persists, please contact support.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_availability",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "TableCreationError"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_availability",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "InitialIngestionError"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_error_availability",
          "comparison": "isEqualTo",
          "value": "0"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Availability"
        }
      ],
      "name": "avail_group_error"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "1dc67097-34d6-4ef1-b0c1-2b3b7b16a148",
                        "version": "KqlParameterItem/1.0",
                        "name": "AvailabilityTimeRange",
                        "label": "Time Range",
                        "type": 4,
                        "value": {
                          "durationMs": 1800000
                        },
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 300000
                            },
                            {
                              "durationMs": 900000
                            },
                            {
                              "durationMs": 1800000
                            },
                            {
                              "durationMs": 3600000
                            },
                            {
                              "durationMs": 14400000
                            },
                            {
                              "durationMs": 43200000
                            },
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 172800000
                            }
                          ],
                          "allowCustom": true
                        },
                        "timeContext": {
                          "durationMs": 86400000
                        }
                      },
                      {
                        "id": "6f7246d7-6be3-463b-9a60-0e80f7e21644",
                        "version": "KqlParameterItem/1.0",
                        "name": "AvailabilitySID",
                        "label": "SID",
                        "type": 2,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| distinct SID_s",
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::all"
                          ],
                          "showDefault": false
                        },
                        "defaultValue": "value::all",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      },
                      {
                        "id": "fdf84634-1e7a-4d02-86a9-7c200b674179",
                        "version": "KqlParameterItem/1.0",
                        "name": "AvailabilityApplicationServer",
                        "label": "Application Server",
                        "type": 2,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "let sidList = dynamic([{AvailabilitySID}]);\r\nSapNetweaver_GetSystemInstanceList_CL\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| where array_length(sidList) == 0 or SID_s in (sidList)\r\n| distinct SID_s, hostname_s, instanceNr_s\r\n| project AppServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| distinct AppServer",
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::all"
                          ],
                          "showDefault": false
                        },
                        "defaultValue": "value::all",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "Availability Parameters"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let sidList = dynamic([{AvailabilitySID}]);\r\nlet appServerList = dynamic([{AvailabilityApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetSystemInstanceList_CL\r\n| where serverTimestamp_t between (todatetime({AvailabilityTimeRange:start}) .. todatetime({AvailabilityTimeRange:end}))\r\n| where array_length(sidList) == 0 or SID_s in (sidList)\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend Status = iff(dispstatus_s == 'SAPControl-GREEN', 0, iff(dispstatus_s == 'SAPControl-YELLOW', 1, iff(dispstatus_s == 'SAPControl-RED', 2, 3)));\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10000, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10000 and RecordCount < 50000, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50000 and RecordCount < 100000, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100000 and RecordCount < 150000, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150000, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize availability=countif(Status == 0), total=count() by bin(timestamp_t, timespanInterval), SID_s\r\n| extend availability = round(toreal(availability) / toreal(total) * 100, 3)\r\n| project-away total",
                    "size": 0,
                    "aggregation": 3,
                    "title": "Availability Status Trend",
                    "color": "green",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "linechart",
                    "chartSettings": {
                      "xAxis": "timestamp_t",
                      "yAxis": [
                        "availability"
                      ],
                      "group": "SID_s",
                      "createOtherGroup": 0,
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true
                          }
                        },
                        "min": 0,
                        "max": 100
                      }
                    }
                  },
                  "name": "AvailabilityTrend"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let sidList = dynamic([{AvailabilitySID}]);\r\nlet appServerList = dynamic([{AvailabilityApplicationServer}]);\r\nSapNetweaver_GetProcessList_CL\r\n| project Instance_Process = description_s, SID_s, hostname_s, instanceNr_d, dispstatus_s, serverTimestamp_t\r\n| where serverTimestamp_t between (todatetime({AvailabilityTimeRange:start}) .. todatetime({AvailabilityTimeRange:end}))\r\n| where array_length(sidList) == 0 or SID_s in (sidList)\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend Status = iff(dispstatus_s == 'SAPControl-GREEN', 0, 1)\r\n| summarize total=count(), failureCount=countif(Status != 0) by Instance_Process, serverTimestamp_t, SID_s\r\n| extend Availability = round(((toreal(total) - toreal(failureCount)) / toreal(total)) * 100, 2)\r\n| summarize Availability = round(avg(Availability), 3), AvailabilityTrend = make_list(Availability) by Instance_Process, SID_s",
                    "size": 0,
                    "title": "Instance Process Availability",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Instance_Process",
                          "formatter": 0,
                          "formatOptions": {
                            "customColumnWidthSetting": "10%"
                          }
                        },
                        {
                          "columnMatch": "SID_s",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "Availability",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "blue",
                            "customColumnWidthSetting": "15%"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "maximumFractionDigits": 3
                            }
                          }
                        },
                        {
                          "columnMatch": "AvailabilityTrend",
                          "formatter": 21,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "green",
                            "customColumnWidthSetting": "75%"
                          },
                          "tooltipFormat": {
                            "tooltip": "[\"Availability\"]"
                          }
                        }
                      ],
                      "hierarchySettings": {
                        "treeType": 1,
                        "groupBy": [
                          "SID_s"
                        ],
                        "expandTopLevel": true
                      },
                      "labelSettings": [
                        {
                          "columnId": "Instance_Process",
                          "label": "Instance Process"
                        },
                        {
                          "columnId": "SID_s",
                          "label": "SID"
                        },
                        {
                          "columnId": "Availability",
                          "label": "Availability %"
                        },
                        {
                          "columnId": "AvailabilityTrend",
                          "label": "Availability Trend"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "customWidth": "100",
                  "name": "Instance Process Availability By SID"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "SelectedTab",
              "comparison": "isEqualTo",
              "value": "Availability"
            },
            "name": "Availability Group"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Availability"
        },
        {
          "parameterName": "param_check_error_availability",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "AvailabilityGroupItems"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "e3f0541f-e03b-4f39-a2f1-8ea0e2a99426",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_error_utilization",
            "type": 1,
            "query": "// 0 = no error\n// 1 = table does not exist (need to add provider)\n// 2 = table exists, but column v1 does not (or) column v1 exists but no data in the table (need to wait)\nlet t = \"SapNetweaver_ABAPGetWPTable_CL\";\nlet c1 = \"hostname_s\";\nlet dummy = \"unmÃ¶glicher-wert!\";\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, records = -1 };\nlet checkRecords =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | summarize records = count()\n    )\n  | project records\n  | top 1 by records desc\n;\nlet checkTableExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | count\n      | extend miss = 0\n    )\n  | project miss\n  | limit 2\n  | top 1 by miss asc\n;\nlet checkColumnExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | extend miss = 0\n      | extend columnV1 = column_ifexists(c1, dummy)\n    )\n  | project miss, columnV1\n  | limit 2\n | top 1 by miss asc\n;\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != 1);\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\nlet tableRecords = toscalar(checkRecords | summarize max(records));\nlet x = iif(tableExists, iif(columnV1Exists, iif(tableRecords > 0, \"0\", \"2\"), \"2\"), \"1\");\nprint toscalar(x)\n",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "dummy_neverset",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "sele",
          "comparison": "isEqualTo",
          "value": "Utilization"
        }
      ],
      "name": "ErrorCheckUtilizationParam"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Unable to create the required table (ABAPGetWPTable) to capture telemetry information. Please try after some time. If the issue persists, please contact support.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_utilization",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "ABABTableCreationError"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_utilization",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "ABABIngestionError"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_error_utilization",
          "comparison": "isNotEqualTo",
          "value": "0"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Utilization"
        }
      ],
      "name": "utilization_group_error"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "4771a9ab-a94e-4dc5-96dc-3a0103a38b98",
                        "version": "KqlParameterItem/1.0",
                        "name": "UtilizationTimeRange",
                        "label": "Time Range",
                        "type": 4,
                        "value": {
                          "durationMs": 1800000
                        },
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 300000
                            },
                            {
                              "durationMs": 900000
                            },
                            {
                              "durationMs": 1800000
                            },
                            {
                              "durationMs": 3600000
                            },
                            {
                              "durationMs": 14400000
                            },
                            {
                              "durationMs": 43200000
                            },
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 172800000
                            }
                          ],
                          "allowCustom": true
                        },
                        "timeContext": {
                          "durationMs": 86400000
                        }
                      },
                      {
                        "id": "23b5cb65-34f1-445b-8df5-1bb46a7fda80",
                        "version": "KqlParameterItem/1.0",
                        "name": "UtilizationSID",
                        "label": "SID",
                        "type": 2,
                        "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| distinct SID_s",
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::1"
                          ],
                          "showDefault": false
                        },
                        "defaultValue": "value::1",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      },
                      {
                        "id": "42bafe96-35aa-40de-98c5-e1eb1a5047e5",
                        "version": "KqlParameterItem/1.0",
                        "name": "UtilizationApplicationServer",
                        "label": "Application Server",
                        "type": 2,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where SID_s == '{UtilizationSID}' or '{UtilizationSID}' == ''\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| distinct SID_s, hostname_s, instanceNr_s\r\n| project AppServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| distinct AppServer",
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::all"
                          ],
                          "showDefault": false
                        },
                        "defaultValue": "value::all",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      },
                      {
                        "id": "b55c977a-256e-491d-952b-5ab35c20b541",
                        "version": "KqlParameterItem/1.0",
                        "name": "UtilizationWorkProcessType",
                        "label": "Work Process Type",
                        "type": 2,
                        "query": "SapNetweaver_ABAPGetWPTable_CL\r\n| distinct Typ_s",
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::1"
                          ],
                          "showDefault": false
                        },
                        "defaultValue": "value::1",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "utilization parameters"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{UtilizationApplicationServer}]);\r\nlet workProcessType = '{UtilizationWorkProcessType}';\r\nSapNetweaver_ABAPGetWPTable_CL\r\n| where serverTimestamp_t between (todatetime({UtilizationTimeRange:start}) .. todatetime({UtilizationTimeRange:end}))\r\n| where SID_s == '{UtilizationSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == workProcessType\r\n| summarize totalWP = count(), freeWP = countif(Status_s == \"Wait\") by bin(timestamp_t, 1m), Typ_s\r\n| extend activeWP = totalWP - freeWP",
                    "size": 0,
                    "aggregation": 3,
                    "title": "Work Process Utilization",
                    "color": "green",
                    "noDataMessage": "No work processes found for the selected filter values.",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "areachart",
                    "chartSettings": {
                      "xAxis": "timestamp_t",
                      "yAxis": [
                        "activeWP",
                        "freeWP"
                      ],
                      "group": null,
                      "createOtherGroup": 0,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "activeWP",
                          "label": "Active Work Processes",
                          "color": "red"
                        },
                        {
                          "seriesName": "freeWP",
                          "label": "Free Work Processes",
                          "color": "blue"
                        }
                      ]
                    }
                  },
                  "name": "Work Process Utilization Trend"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{UtilizationApplicationServer}]);\r\nlet workProcessType = '{UtilizationWorkProcessType}';\r\nlet maxTimestamp = SapNetweaver_ABAPGetWPTable_CL\r\n| where SID_s == '{UtilizationSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == workProcessType\r\n| where Status_s == 'Run' or Status_s == 'On Hold'\r\n| summarize max(serverTimestamp_t);\r\n\r\nSapNetweaver_ABAPGetWPTable_CL\r\n| where serverTimestamp_t == toscalar(maxTimestamp)\r\n| where SID_s == '{UtilizationSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == workProcessType\r\n| where Status_s == 'Run' or Status_s == 'On-Hold'\r\n| extend AppServerInstance = strcat(hostname_s, \"_\", SID_s,\"_\", instanceNr_s)\r\n| project AppServerInstance, No_d, Typ_s, Pid_d, Status_s, Reason_s, Err_s , Cpu_s,Time_s, Program_s, User_s, Client_s\r\n",
                    "size": 0,
                    "title": "Active Work Process (SM66)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "No_d",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "Pid_d",
                          "formatter": 1
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "AppServerInstance",
                          "label": "Application Server Instance"
                        },
                        {
                          "columnId": "No_d",
                          "label": "Number"
                        },
                        {
                          "columnId": "Typ_s",
                          "label": "Type"
                        },
                        {
                          "columnId": "Pid_d",
                          "label": "Process Id"
                        },
                        {
                          "columnId": "Status_s",
                          "label": "Status"
                        },
                        {
                          "columnId": "Reason_s",
                          "label": "Reason"
                        },
                        {
                          "columnId": "Err_s",
                          "label": "Error"
                        },
                        {
                          "columnId": "Cpu_s",
                          "label": "CPU Time"
                        },
                        {
                          "columnId": "Time_s",
                          "label": "Time Priority"
                        },
                        {
                          "columnId": "Program_s",
                          "label": "Program Name"
                        },
                        {
                          "columnId": "User_s",
                          "label": "User Id"
                        },
                        {
                          "columnId": "Client_s",
                          "label": "Client"
                        }
                      ]
                    }
                  },
                  "name": "ActiveWorkprocess (SM66)"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "SelectedTab",
              "comparison": "isEqualTo",
              "value": "Utilization"
            },
            "name": "utilization metrics group"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Utilization"
        },
        {
          "parameterName": "param_check_error_utilization",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "Utilization Group Items"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "5cce3807-e36c-460d-bd2a-bc7d03e2e11b",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_error_enqStat",
            "type": 1,
            "query": "// 0 = no error\n// 1 = table does not exist (need to add provider)\n// 2 = table exists, but column v1 does not (or) column v1 exists but no data in the table (need to wait)\nlet t = \"SapNetweaver_EnqGetStatistic_CL\";\nlet c1 = \"SID_s\";\nlet dummy = \"unmÃ¶glicher-wert!\";\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, records = -1 };\nlet checkRecords =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | summarize records = count()\n    )\n  | project records\n  | top 1 by records desc\n;\nlet checkTableExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | count\n      | extend miss = 0\n    )\n  | project miss\n  | limit 2\n  | top 1 by miss asc\n;\nlet checkColumnExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | extend miss = 0\n      | extend columnV1 = column_ifexists(c1, dummy)\n    )\n  | project miss, columnV1\n  | limit 2\n | top 1 by miss asc\n;\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != 1);\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\nlet tableRecords = toscalar(checkRecords | summarize max(records));\nlet x = iif(tableExists, iif(columnV1Exists, iif(tableRecords > 0, \"0\", \"2\"), \"2\"), \"1\");\nprint toscalar(x)\n",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "dummy_neverset",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "EnqueueStatistics"
        }
      ],
      "name": "ErrorCheckEnqStatParam"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Unable to create the required table (EnqGetStatistic) to capture telemetry information. Please try after some time. If the issue persists, please contact support.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_enqStat",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "EnqTableCreationError"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_enqStat",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "EnqIngestionError"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_error_enqStat",
          "comparison": "isNotEqualTo",
          "value": "0"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "EnqueueStatistics"
        }
      ],
      "name": "enqStat_group_error"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "4f30fd82-9e96-43f4-ab7d-92bbbd864bbc",
                  "version": "KqlParameterItem/1.0",
                  "name": "EnqueueStatisticsTimeRange",
                  "label": "Time Range",
                  "type": 4,
                  "value": {
                    "durationMs": 1800000
                  },
                  "typeSettings": {
                    "selectableValues": [
                      {
                        "durationMs": 300000
                      },
                      {
                        "durationMs": 900000
                      },
                      {
                        "durationMs": 1800000
                      },
                      {
                        "durationMs": 3600000
                      },
                      {
                        "durationMs": 14400000
                      },
                      {
                        "durationMs": 43200000
                      },
                      {
                        "durationMs": 86400000
                      },
                      {
                        "durationMs": 172800000
                      }
                    ],
                    "allowCustom": true
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "4282dc01-b183-45b4-aa95-183573fe66bd",
                  "version": "KqlParameterItem/1.0",
                  "name": "EnqueueStatisticsSID",
                  "label": "SID",
                  "type": 2,
                  "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| distinct SID_s",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "728ca96a-6ee0-4fe1-9f60-a1c7ca8feaed",
                  "version": "KqlParameterItem/1.0",
                  "name": "EnqueueStatisticsApplicationServer",
                  "label": "Application Server",
                  "type": 2,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where SID_s == '{EnqueueStatisticsSID}' or '{EnqueueStatisticsSID}' == ''\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| distinct SID_s, hostname_s, instanceNr_s\r\n| project AppServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| distinct AppServer",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "enqStatParameters"
          },
          {
            "type": 1,
            "content": {
              "json": "### Enqueue Lock Statistics"
            },
            "name": "text - 12"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{EnqueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{EnqueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList);\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project enqueue_requests_d\r\n| summarize threshold = percentile(enqueue_requests_d, 95);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({EnqueueStatisticsTimeRange:start}) .. todatetime({EnqueueStatisticsTimeRange:end}))\r\n| project enqueue_requests_d, serverTimestamp_t\r\n| summarize sum(enqueue_requests_d), arg_max(serverTimestamp_t, enqueue_requests_d)\r\n| extend dummy=1\r\n| join kind=inner ( thresholdQuery | extend dummy=1) on dummy\r\n| extend percentageChange = iff(threshold == 0, toreal(0), (toreal(enqueue_requests_d - threshold) / toreal(threshold) * 100))\r\n| project sum_enqueue_requests_d, percentageChange, displayPercentChange = round(abs(percentageChange), 3)\r\n| extend Title = \"Number Of Lock Requests\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "sum_enqueue_requests_d",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "percentageChange",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": ">",
                        "thresholdValue": "0",
                        "representation": "up",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "text": ""
                      },
                      {
                        "operator": "<",
                        "thresholdValue": "0",
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      }
                    ]
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Number Of Lock Requests"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{EnqueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{EnqueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList);\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project enqueue_rejects_d\r\n| summarize threshold = percentile(enqueue_rejects_d, 95);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({EnqueueStatisticsTimeRange:start}) .. todatetime({EnqueueStatisticsTimeRange:end}))\r\n| project enqueue_rejects_d, serverTimestamp_t\r\n| summarize sum(enqueue_rejects_d), arg_max(serverTimestamp_t, enqueue_rejects_d)\r\n| extend dummy=1\r\n| join kind=inner ( thresholdQuery | extend dummy=1) on dummy\r\n| extend percentageChange = iff(threshold == 0, toreal(0), toreal(enqueue_rejects_d - threshold) / toreal(threshold) * 100)\r\n| project sum_enqueue_rejects_d, percentageChange, displayPercentChange = round(abs(percentageChange), 3)\r\n| extend Title = \"Rejected Lock Requests\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "sum_enqueue_rejects_d",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "percentageChange",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": ">",
                        "thresholdValue": "0",
                        "representation": "up",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "text": ""
                      },
                      {
                        "operator": "<",
                        "thresholdValue": "0",
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      }
                    ]
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Rejected Lock Requests"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{EnqueueStatisticsApplicationServer}]);\r\nSapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{EnqueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where serverTimestamp_t between (todatetime({EnqueueStatisticsTimeRange:start}) .. todatetime({EnqueueStatisticsTimeRange:end}))\r\n| summarize TotalErrors = sum(enqueue_errors_d)\r\n| extend Title = \"Enqueue Errors\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "TotalErrors",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Enqueue Errors"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{EnqueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{EnqueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList);\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project lock_time_d\r\n| summarize threshold = percentile(lock_time_d, 95)\r\n| project threshold = iff(isnull(threshold), toreal(0), threshold);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({EnqueueStatisticsTimeRange:start}) .. todatetime({EnqueueStatisticsTimeRange:end}))\r\n| project lock_time_d, serverTimestamp_t\r\n| summarize avg(lock_time_d), arg_max(serverTimestamp_t, lock_time_d)\r\n| where isnan(avg_lock_time_d) != 1\r\n| extend dummy=1\r\n| join kind=inner ( thresholdQuery | extend dummy=1) on dummy\r\n| extend percentageChange = iff(threshold == 0, toreal(0), (toreal(lock_time_d - threshold) / toreal(threshold) * 100))\r\n| project avg_lock_time_d , percentageChange, displayPercentChange = round(abs(percentageChange), 3)\r\n| extend Title = \"Average Time For Lock Operations\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "avg_lock_time_d",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 24,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "percentageChange",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": ">",
                        "thresholdValue": "0",
                        "representation": "up",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "text": ""
                      },
                      {
                        "operator": "<",
                        "thresholdValue": "0",
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      }
                    ]
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Average Time Taken For Lock Operations"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{EnqueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{EnqueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList);\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project lock_wait_time_d\r\n| summarize threshold = percentile(lock_wait_time_d, 95);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({EnqueueStatisticsTimeRange:start}) .. todatetime({EnqueueStatisticsTimeRange:end}))\r\n| project lock_wait_time_d, serverTimestamp_t\r\n| summarize avg(lock_wait_time_d), arg_max(serverTimestamp_t, lock_wait_time_d)\r\n| where isnan(avg_lock_wait_time_d) != 1\r\n| extend dummy=1\r\n| join kind=inner ( thresholdQuery | extend dummy=1) on dummy\r\n| extend percentageChange = iff(threshold == 0, toreal(0), toreal(lock_wait_time_d - threshold) / toreal(threshold) * 100)\r\n| project avg_lock_wait_time_d, percentageChange, displayPercentChange = round(abs(percentageChange), 3)\r\n| extend Title = \"Average Waiting Time Taken For Lock Operations\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "avg_lock_wait_time_d",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 24,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "percentageChange",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": ">",
                        "thresholdValue": "0",
                        "representation": "up",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "text": ""
                      },
                      {
                        "operator": "<",
                        "thresholdValue": "0",
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      }
                    ]
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Average Waiting Time Taken For Lock Operations"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{EnqueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{EnqueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList);\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project server_time_d\r\n| summarize threshold = percentile(server_time_d, 95);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({EnqueueStatisticsTimeRange:start}) .. todatetime({EnqueueStatisticsTimeRange:end}))\r\n| project server_time_d, serverTimestamp_t\r\n| summarize avg(server_time_d), arg_max(serverTimestamp_t, server_time_d)\r\n| where isnan(avg_server_time_d) != 1\r\n| extend dummy=1\r\n| join kind=inner ( thresholdQuery | extend dummy=1) on dummy\r\n| extend percentageChange = iff(threshold == 0, toreal(0), toreal(server_time_d - threshold) / toreal(threshold) * 100)\r\n| project avg_server_time_d, percentageChange, displayPercentChange = round(abs(percentageChange), 3)\r\n| extend Title = \"Average Time Taken In Enqueue Server\"",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "formatter": 2,
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "leftContent": {
                  "columnMatch": "avg_server_time_d",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 24,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "percentageChange",
                  "formatter": 18,
                  "formatOptions": {
                    "thresholdsOptions": "icons",
                    "thresholdsGrid": [
                      {
                        "operator": ">",
                        "thresholdValue": "0",
                        "representation": "up",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "==",
                        "thresholdValue": "0",
                        "text": ""
                      },
                      {
                        "operator": "<",
                        "thresholdValue": "0",
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      },
                      {
                        "operator": "Default",
                        "thresholdValue": null,
                        "representation": "down",
                        "text": "[\"displayPercentChange\"]%"
                      }
                    ]
                  },
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false
                    }
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Title",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "full"
              }
            },
            "customWidth": "33",
            "name": "Average Time Taken In Enqueue Server"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{EnqueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{EnqueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList);\r\nlet lockQuery = baseQuery\r\n| project locks_now_d, locks_max_d, serverTimestamp_t, arguments_state_s\r\n| summarize arg_max(serverTimestamp_t, arguments_state_s), Average=avg(locks_now_d), Max=max(locks_now_d), ObjectLimit=max(locks_max_d)\r\n| where isnan(Average) != 1\r\n| extend ['Lock Object Type'] = \"Locks\"\r\n| project ['Lock Object Type'], arguments_state_s, Average, Max, ObjectLimit;\r\nlet ownerQuery = baseQuery\r\n| project owner_now_d, owner_max_d, arguments_state_s, serverTimestamp_t\r\n| summarize arg_max(serverTimestamp_t, arguments_state_s), Average=avg(owner_now_d), Max=max(owner_now_d), ObjectLimit=max(owner_max_d)\r\n| where isnan(Average) != 1\r\n| extend ['Lock Object Type'] = \"Owner\"\r\n| project ['Lock Object Type'], arguments_state_s, Average, Max, ObjectLimit;\r\nlet argumentQuery = baseQuery\r\n| project owner_now_d, owner_max_d, arguments_state_s, serverTimestamp_t\r\n| summarize arg_max(serverTimestamp_t, arguments_state_s), Average=avg(owner_now_d), Max=max(owner_now_d), ObjectLimit=max(owner_max_d)\r\n| where isnan(Average) != 1\r\n| extend ['Lock Object Type'] = \"Arguments\"\r\n| project ['Lock Object Type'], arguments_state_s, Average, Max, ObjectLimit;\r\nlet replicationStateQuery = baseQuery\r\n| project replication_state_s, serverTimestamp_t\r\n| summarize arg_max(serverTimestamp_t, replication_state_s)\r\n| project arguments_state_s = replication_state_s\r\n| where isempty(arguments_state_s) != 1\r\n| extend ['Lock Object Type'] = 'Replication State';\r\nlockQuery\r\n| union ownerQuery\r\n| union argumentQuery\r\n| union replicationStateQuery\r\n| extend Status = iff(arguments_state_s == 'SAPControl-GREEN', \"OK\", \"\")\r\n| extend Status = iff(arguments_state_s == 'SAPControl-RED', \"Critical\", Status)\r\n| extend Status = iff(isempty(Status), \"Warning\", Status)\r\n| project ['Lock Object Type'], Status, Average, Max, ObjectLimit\r\n| project-reorder ['Lock Object Type'], Status, Average, Max, ObjectLimit",
              "size": 1,
              "noDataMessage": "The query returned no result",
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Lock Object Type",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "Status",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "OK",
                          "representation": "success",
                          "text": "{0}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Critical",
                          "representation": "4",
                          "text": "{0}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Warning",
                          "representation": "2",
                          "text": "{0}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "Unknown",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Average",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 3
                      }
                    }
                  },
                  {
                    "columnMatch": "Max",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "ObjectLimit",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal"
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "[\"ObjectLimit\"]"
                    }
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "Lock Object Type",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "Lock Object Type"
                  },
                  {
                    "columnId": "Status"
                  },
                  {
                    "columnId": "Average",
                    "label": "Average Number Of Objects"
                  },
                  {
                    "columnId": "Max",
                    "label": "Max Number Of Objects"
                  },
                  {
                    "columnId": "ObjectLimit",
                    "label": "Object Limit"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "Lock Object Type",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "100",
            "name": "Enqueue Lock Statistics Status"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{EnqueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n| where SID_s == '{EnqueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList);\r\nlet thresholdQuery = baseQuery\r\n| where serverTimestamp_t > ago(24h)\r\n| project locks_now_d\r\n| summarize Threshold=percentile(locks_now_d, 95);\r\nbaseQuery\r\n| where serverTimestamp_t between (todatetime({EnqueueStatisticsTimeRange:start}) .. todatetime({EnqueueStatisticsTimeRange:end}))\r\n| extend dummy=1\r\n| join kind=inner (thresholdQuery | extend dummy=1) on dummy\r\n| project locks_now_d, Threshold, serverTimestamp_t",
              "size": 0,
              "aggregation": 3,
              "title": "Enqueue Locks",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "chartSettings": {
                "xAxis": "serverTimestamp_t",
                "yAxis": [
                  "locks_now_d",
                  "Threshold"
                ],
                "seriesLabelSettings": [
                  {
                    "seriesName": "locks_now_d",
                    "label": "Number of Locks"
                  },
                  {
                    "seriesName": "locks_high_d",
                    "label": "Max Locks"
                  }
                ]
              }
            },
            "name": "Enqueue Locks Trend"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "EnqueueStatistics"
        },
        {
          "parameterName": "param_check_error_enqStat",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "enqueueStatistics"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "4c3403c2-3978-4751-a4a7-5ff4d03ca84e",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_error_queuestat",
            "type": 1,
            "query": "// 0 = no error\n// 1 = table does not exist (need to add provider)\n// 2 = table exists, but column v1 does not (or) column v1 exists but no data in the table (need to wait)\nlet t = \"SapNetweaver_GetQueueStatistic_CL\";\nlet c1 = \"SID_s\";\nlet dummy = \"unmÃ¶glicher-wert!\";\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, records = -1 };\nlet checkRecords =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | summarize records = count()\n    )\n  | project records\n  | top 1 by records desc\n;\nlet checkTableExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | count\n      | extend miss = 0\n    )\n  | project miss\n  | limit 2\n  | top 1 by miss asc\n;\nlet checkColumnExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | extend miss = 0\n      | extend columnV1 = column_ifexists(c1, dummy)\n    )\n  | project miss, columnV1\n  | limit 2\n | top 1 by miss asc\n;\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != 1);\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\nlet tableRecords = toscalar(checkRecords | summarize max(records));\nlet x = iif(tableExists, iif(columnV1Exists, iif(tableRecords > 0, \"0\", \"2\"), \"2\"), \"1\");\nprint toscalar(x)\n",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "dummy_neverset",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "QueueStatistics"
        }
      ],
      "name": "ErrorCheckQueueStatParam"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "Unable to create the required table (GetQueueStatistic) to capture telemetry information. Please try after some time. If the issue persists, please contact support.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_queuestat",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "QueueStatTableCreationError"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_queuestat",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "QueueStatIngestionError"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_error_queuestat",
          "comparison": "isNotEqualTo",
          "value": "0"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "QueueStatistics"
        }
      ],
      "name": "queuestat_group_error"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "38e011a1-b22b-4aa2-b746-0d49a6f5a0c7",
                  "version": "KqlParameterItem/1.0",
                  "name": "QueueStatisticsTimeRange",
                  "label": "Time Range",
                  "type": 4,
                  "value": {
                    "durationMs": 1800000
                  },
                  "typeSettings": {
                    "selectableValues": [
                      {
                        "durationMs": 300000
                      },
                      {
                        "durationMs": 900000
                      },
                      {
                        "durationMs": 1800000
                      },
                      {
                        "durationMs": 3600000
                      },
                      {
                        "durationMs": 14400000
                      },
                      {
                        "durationMs": 43200000
                      },
                      {
                        "durationMs": 86400000
                      },
                      {
                        "durationMs": 172800000
                      }
                    ],
                    "allowCustom": true
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "f2ca0cf2-96ec-42a2-bde1-72f142b0bf6b",
                  "version": "KqlParameterItem/1.0",
                  "name": "QueueStatisticsSID",
                  "label": "SID",
                  "type": 2,
                  "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| distinct SID_s",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::1"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::1",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                {
                  "id": "f9327d05-2237-4e28-a2cf-3efc57d3e80a",
                  "version": "KqlParameterItem/1.0",
                  "name": "QueueStatisticsApplicationServer",
                  "label": "Application Server",
                  "type": 2,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where SID_s == '{QueueStatisticsSID}' or '{QueueStatisticsSID}' == ''\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| distinct SID_s, hostname_s, instanceNr_s\r\n| project AppServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| distinct AppServer",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "queueStatisticsParameters"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Queue Utilization Statistics",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{QueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({QueueStatisticsTimeRange:start}) .. todatetime({QueueStatisticsTimeRange:end}))\r\n| where SID_s == '{QueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == 'ABAP/UPD'\r\n| summarize AvgRequests = avg(Now_d), QueueLimit = max(Max_d);\r\nlet freeQuery = baseQuery\r\n| project Title = 'Used', Utilization = AvgRequests;\r\nlet utilizationQuery = baseQuery\r\n| project Title = 'Free', Utilization = QueueLimit - AvgRequests;\r\nfreeQuery\r\n| union utilizationQuery",
                    "size": 1,
                    "title": "Update Queue (UPD)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "piechart",
                    "chartSettings": {
                      "yAxis": [
                        "Utilization"
                      ],
                      "group": "Title",
                      "createOtherGroup": null,
                      "showMetrics": false,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Free",
                          "color": "blue"
                        },
                        {
                          "seriesName": "Queue Utilization",
                          "color": "red"
                        }
                      ]
                    }
                  },
                  "customWidth": "25",
                  "name": "UpdateQueuePieChart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{QueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({QueueStatisticsTimeRange:start}) .. todatetime({QueueStatisticsTimeRange:end}))\r\n| where SID_s == '{QueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == 'ABAP/DIA'\r\n| summarize AvgRequests = avg(Now_d), QueueLimit = max(Max_d);\r\nlet freeQuery = baseQuery\r\n| project Title = 'Used', Utilization = AvgRequests;\r\nlet utilizationQuery = baseQuery\r\n| project Title = 'Free', Utilization = QueueLimit - AvgRequests;\r\nfreeQuery\r\n| union utilizationQuery",
                    "size": 1,
                    "title": "Dialog Queue (DIA)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "piechart",
                    "chartSettings": {
                      "yAxis": [
                        "Utilization"
                      ],
                      "group": "Title",
                      "createOtherGroup": null,
                      "showMetrics": false,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Free",
                          "label": "Free",
                          "color": "blue"
                        },
                        {
                          "seriesName": "Used",
                          "label": "Used",
                          "color": "red"
                        }
                      ]
                    }
                  },
                  "customWidth": "25",
                  "name": "DialogQueuePieChart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{QueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({QueueStatisticsTimeRange:start}) .. todatetime({QueueStatisticsTimeRange:end}))\r\n| where SID_s == '{QueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == 'ABAP/ENQ'\r\n| summarize AvgRequests = avg(Now_d), QueueLimit = max(Max_d);\r\nlet freeQuery = baseQuery\r\n| project Title = 'Used', Utilization = AvgRequests;\r\nlet utilizationQuery = baseQuery\r\n| project Title = 'Free', Utilization = QueueLimit - AvgRequests;\r\nfreeQuery\r\n| union utilizationQuery",
                    "size": 1,
                    "title": "Enqueue Queue (ENQ)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "piechart",
                    "chartSettings": {
                      "yAxis": [
                        "Utilization"
                      ],
                      "group": "Title",
                      "createOtherGroup": null,
                      "showMetrics": false,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Free",
                          "color": "blue"
                        },
                        {
                          "seriesName": "Queue Utilization",
                          "color": "red"
                        }
                      ]
                    }
                  },
                  "customWidth": "25",
                  "name": "EnqueueQueuePieChart"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{QueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({QueueStatisticsTimeRange:start}) .. todatetime({QueueStatisticsTimeRange:end}))\r\n| where SID_s == '{QueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| where Typ_s == 'ABAP/BTC'\r\n| summarize AvgRequests = avg(Now_d), QueueLimit = max(Max_d);\r\nlet freeQuery = baseQuery\r\n| project Title = 'Used', Utilization = AvgRequests;\r\nlet utilizationQuery = baseQuery\r\n| project Title = 'Free', Utilization = QueueLimit - AvgRequests;\r\nfreeQuery\r\n| union utilizationQuery",
                    "size": 1,
                    "title": "Batch Queue (BTC)",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "piechart",
                    "chartSettings": {
                      "yAxis": [
                        "Utilization"
                      ],
                      "group": "Title",
                      "createOtherGroup": null,
                      "showMetrics": false,
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Free",
                          "color": "blue"
                        },
                        {
                          "seriesName": "Queue Utilization",
                          "color": "red"
                        }
                      ]
                    }
                  },
                  "customWidth": "25",
                  "name": "BatchQueuePieChart"
                }
              ]
            },
            "name": "Queue Utilization Statistics"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let appServerList = dynamic([{QueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({QueueStatisticsTimeRange:start}) .. todatetime({QueueStatisticsTimeRange:end}))\r\n| where SID_s == '{QueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList);\r\nlet MaxQuery = baseQuery\r\n| summarize QueueLimit=max(Max_d) by Typ_s;\r\nlet CurrentStatusQuery = baseQuery\r\n| summarize CurrentStatus = arg_max(serverTimestamp_t, Now_d) by Typ_s;\r\nbaseQuery\r\n| summarize AvgRequests = avg(Now_d), MaxRequests = max(Now_d), ReadRequest = sum(Reads_d), WriteRequest = sum(Writes_d) by Typ_s\r\n| join kind=inner MaxQuery on Typ_s\r\n| join kind=inner CurrentStatusQuery on Typ_s\r\n| extend QueueUtilization = iff(QueueLimit != 0, (toreal(Now_d) / toreal(QueueLimit)) * 100, 0.0)\r\n| extend Status = iff(QueueUtilization <= 40, \"OK\", \"\")\r\n| extend Status = iff(QueueUtilization > 40 and QueueUtilization <= 70 , \"Warning\", Status)\r\n| extend Status = iff(QueueUtilization > 70, \"Critical\", Status)\r\n| project Typ_s, Status, AvgRequests, MaxRequests, QueueLimit, WriteRequest, ReadRequest\r\n| project-reorder Typ_s, Status, AvgRequests, MaxRequests, QueueLimit, WriteRequest, ReadRequest",
              "size": 0,
              "title": "Queue Statistic Summary",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Status",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "OK",
                          "representation": "success",
                          "text": "{0}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Warning",
                          "representation": "2",
                          "text": "{0}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Critical",
                          "representation": "critical",
                          "text": "{0}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "{0}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "AvgRequests",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "MaxRequests",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "QueueLimit",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "WriteRequest",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "[\"WriteRequest\"]"
                    }
                  },
                  {
                    "columnMatch": "ReadRequest",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "[\"ReadRequest\"]"
                    }
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "$gen_number_MaxRequests_3",
                    "sortOrder": 2
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "Typ_s",
                    "label": "Queue"
                  },
                  {
                    "columnId": "Status"
                  },
                  {
                    "columnId": "AvgRequests",
                    "label": "Average Number Of Requests In Queue"
                  },
                  {
                    "columnId": "MaxRequests",
                    "label": "Max Number Of Requests In Queue"
                  },
                  {
                    "columnId": "QueueLimit",
                    "label": "Queue Limit"
                  },
                  {
                    "columnId": "WriteRequest",
                    "label": "Number Of Requests Written"
                  },
                  {
                    "columnId": "ReadRequest",
                    "label": "Number Of Requests Read"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "$gen_number_MaxRequests_3",
                  "sortOrder": 2
                }
              ]
            },
            "customWidth": "100",
            "name": "DetailedQueueSummary",
            "styleSettings": {
              "maxWidth": "100%"
            }
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "ebeb7d85-8c21-4534-8135-b05732fab7b5",
                  "version": "KqlParameterItem/1.0",
                  "name": "QueueType",
                  "label": "Queue Type",
                  "type": 2,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "let appServerList = dynamic([{QueueStatisticsApplicationServer}]);\r\nSapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({QueueStatisticsTimeRange:start}) .. todatetime({QueueStatisticsTimeRange:end}))\r\n| where SID_s == '{QueueStatisticsSID}'\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| distinct Typ_s;",
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "defaultValue": "value::all",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "QueueType"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let queueList = dynamic([{QueueType}]);\r\nlet appServerList = dynamic([{QueueStatisticsApplicationServer}]);\r\nlet baseQuery = SapNetweaver_GetQueueStatistic_CL\r\n| where serverTimestamp_t between (todatetime({QueueStatisticsTimeRange:start}) .. todatetime({QueueStatisticsTimeRange:end}))\r\n| where SID_s == '{QueueStatisticsSID}'\r\n| where array_length(queueList) == 0 or Typ_s in (queueList)\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend Now_d;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10000, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10000 and RecordCount < 50000, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50000 and RecordCount < 100000, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100000 and RecordCount < 150000, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150000, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize Request=sum(Now_d) by bin(timestamp_t, timespanInterval), Typ_s",
              "size": 0,
              "aggregation": 3,
              "title": "Queue Length Trend Graph",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "linechart",
              "chartSettings": {
                "xAxis": "timestamp_t",
                "yAxis": [
                  "Request"
                ],
                "xSettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false
                    }
                  }
                },
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "name": "QueueLengthTrend"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "QueueStatistics"
        },
        {
          "parameterName": "param_check_error_queuestat",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "Queue Statistics Group"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "0249fee8-11eb-41b2-868b-3e16b5285eb8",
            "version": "KqlParameterItem/1.0",
            "name": "param_check_error_shortdump",
            "type": 1,
            "query": "// 0 = no error\n// 1 = table does not exist (need to enable RFC)\n// 2 = table exists, but column v1 does not (or) column v1 exists but no data in the table (need to wait)\nlet t = \"SapNetweaver_ShortDumps_CL\";\nlet c1 = \"SID_s\";\nlet dummy = \"unmÃ¶glicher-wert!\";\nlet MissingTable = view () { print miss = 1, columnV1 = dummy, records = -1 };\nlet checkRecords =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | summarize records = count()\n    )\n  | project records\n  | top 1 by records desc\n;\nlet checkTableExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | count\n      | extend miss = 0\n    )\n  | project miss\n  | limit 2\n  | top 1 by miss asc\n;\nlet checkColumnExists =\n  union\n    isfuzzy=true MissingTable,\n    (table(t)\n      | extend miss = 0\n      | extend columnV1 = column_ifexists(c1, dummy)\n    )\n  | project miss, columnV1\n  | limit 2\n  | top 1 by miss asc\n ;\nlet tableExists = toscalar(checkTableExists | summarize max(miss) != 1);\nlet columnV1Exists = toscalar(checkColumnExists | summarize max(columnV1) != dummy);\nlet tableRecords = toscalar(checkRecords | summarize max(records));\nlet x = iif(tableExists, iif(columnV1Exists, iif(tableRecords > 0, \"0\", \"2\"), \"2\"), \"1\");\nprint toscalar(x)\n\n",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "dummy_neverset",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Application"
        }
      ],
      "name": "ErrorCheckShortDumpParam"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "These metrics are available when you configure the NetWeaver provider to include support for RFC communication. You will need to add the NetWeaver provider again.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_shortdump",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "QueueStatTableCreationError"
          },
          {
            "type": 1,
            "content": {
              "json": "It may take up to 15 minutes for the initial telemetry information to be available for review. Please check again later.",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "param_check_error_shortdump",
              "comparison": "isEqualTo",
              "value": "2"
            },
            "name": "ShortDumpIngestionError"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "param_check_error_shortdump",
          "comparison": "isNotEqualTo",
          "value": "0"
        },
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Application"
        }
      ],
      "name": "shortdump_group_error"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "1dc67097-34d6-4ef1-b0c1-2b3b7b16a148",
                        "version": "KqlParameterItem/1.0",
                        "name": "ApplicationTimeRange",
                        "label": "Time Range",
                        "type": 4,
                        "value": {
                          "durationMs": 1800000
                        },
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 300000
                            },
                            {
                              "durationMs": 900000
                            },
                            {
                              "durationMs": 1800000
                            },
                            {
                              "durationMs": 3600000
                            },
                            {
                              "durationMs": 14400000
                            },
                            {
                              "durationMs": 43200000
                            },
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 172800000
                            }
                          ],
                          "allowCustom": true
                        },
                        "timeContext": {
                          "durationMs": 86400000
                        }
                      },
                      {
                        "id": "6f7246d7-6be3-463b-9a60-0e80f7e21644",
                        "version": "KqlParameterItem/1.0",
                        "name": "ApplicationSID",
                        "label": "SID",
                        "type": 2,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| distinct SID_s",
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::1"
                          ],
                          "showDefault": false
                        },
                        "defaultValue": "value::1",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      },
                      {
                        "id": "fdf84634-1e7a-4d02-86a9-7c200b674179",
                        "version": "KqlParameterItem/1.0",
                        "name": "ApplicationServer",
                        "label": "Application Server",
                        "type": 2,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "let sidList = dynamic([{ApplicationSID}]);\r\nSapNetweaver_GetSystemInstanceList_CL\r\n| extend instanceNr_s = tostring(toint(instanceNr_d))\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| where array_length(sidList) == 0 or SID_s in (sidList)\r\n| distinct SID_s, hostname_s, instanceNr_s\r\n| project AppServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| distinct AppServer",
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::all"
                          ],
                          "showDefault": false
                        },
                        "defaultValue": "value::all",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "Application Parameters"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet sidList = dynamic([{ApplicationSID}]);\r\nlet baseQuery = SapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({ApplicationTimeRange:start}) .. todatetime({ApplicationTimeRange:end}))\r\n| where array_length(sidList) == 0 or SID_s in (sidList)\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList);\r\nlet percentileQuery = baseQuery\r\n| where timestamp_t > ago(24h)\r\n| summarize totalsd = count()\r\n| summarize percentileValue=percentile(totalsd, 95);\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10000, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10000 and RecordCount < 50000, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50000 and RecordCount < 100000, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100000 and RecordCount < 150000, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150000, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| extend dummy=1\r\n| join kind=inner (percentileQuery | extend dummy=1) on dummy\r\n| summarize total=count() by bin(timestamp_t, timespanInterval), percentileValue\r\n",
                    "size": 0,
                    "aggregation": 3,
                    "title": "Short Dumps Count",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "linechart",
                    "chartSettings": {
                      "xAxis": "timestamp_t",
                      "seriesLabelSettings": [
                        {
                          "seriesName": "total",
                          "label": "Short Dump Count"
                        },
                        {
                          "seriesName": "percentileValue",
                          "label": "95th Percentile For 24 Hours"
                        }
                      ]
                    }
                  },
                  "name": "shortdump"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Short Dump By Error",
                    "expandable": true,
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet sidList = dynamic([{ApplicationSID}]);\r\nlet baseQuery = SapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({ApplicationTimeRange:start}) .. todatetime({ApplicationTimeRange:end}))\r\n| where array_length(sidList) == 0 or SID_s in (sidList)\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend Runtime_Error_s;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize Count = count() by bin(timestamp_t, timespanInterval), Runtime_Error_s",
                          "size": 0,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "unstackedbar",
                          "chartSettings": {
                            "xAxis": "Runtime_Error_s",
                            "yAxis": [
                              "Count"
                            ],
                            "group": "Runtime_Error_s",
                            "createOtherGroup": null,
                            "showMetrics": false
                          }
                        },
                        "name": "Shortdumpbyerror"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet sidList = dynamic([{ApplicationSID}]);\r\nSapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({ApplicationTimeRange:start}) .. todatetime({ApplicationTimeRange:end}))\r\n| where array_length(sidList) == 0 or SID_s in (sidList)\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| summarize Count=count() by Runtime_Error_s, Error_Short_Text_s, Exception_s, SID_s\r\n| order by Count",
                          "size": 0,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "Runtime_Error_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Error_Short_Text_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Exception_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "SID_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Count",
                                "formatter": 1
                              }
                            ],
                            "sortBy": [
                              {
                                "itemKey": "Runtime_Error_s",
                                "sortOrder": 1
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "Runtime_Error_s",
                                "label": "Runtime Exceptions"
                              },
                              {
                                "columnId": "Error_Short_Text_s",
                                "label": "Exception Text"
                              },
                              {
                                "columnId": "Exception_s",
                                "label": "Exceptions"
                              },
                              {
                                "columnId": "SID_s",
                                "label": "Source System"
                              },
                              {
                                "columnId": "Count",
                                "label": "Exception Count"
                              }
                            ]
                          },
                          "sortBy": [
                            {
                              "itemKey": "Runtime_Error_s",
                              "sortOrder": 1
                            }
                          ]
                        },
                        "customWidth": "0",
                        "name": "shortdumpexceptions",
                        "styleSettings": {
                          "maxWidth": "100%"
                        }
                      }
                    ]
                  },
                  "name": "Shortdumpbyerrorgroup"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Short Dump By Program",
                    "expandable": true,
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet sidList = dynamic([{ApplicationSID}]);\r\nlet baseQuery = SapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({ApplicationTimeRange:start}) .. todatetime({ApplicationTimeRange:end}))\r\n| where array_length(sidList) == 0 or SID_s in (sidList)\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend Program_s;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize Count = count() by bin(timestamp_t, timespanInterval), Program_s",
                          "size": 0,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "unstackedbar",
                          "chartSettings": {
                            "xAxis": "Program_s",
                            "yAxis": [
                              "Count"
                            ],
                            "showMetrics": false
                          }
                        },
                        "name": "shortdumpbyprogram"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet sidList = dynamic([{ApplicationSID}]);\r\nSapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({ApplicationTimeRange:start}) .. todatetime({ApplicationTimeRange:end}))\r\n| where array_length(sidList) == 0 or SID_s in (sidList)\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| summarize Count=count() by Program_s, SID_s\r\n| order by Count",
                          "size": 0,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "Program_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "SID_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Count",
                                "formatter": 1
                              }
                            ],
                            "sortBy": [
                              {
                                "itemKey": "Program_s",
                                "sortOrder": 1
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "Program_s",
                                "label": "Top Cancelled Programs"
                              },
                              {
                                "columnId": "SID_s",
                                "label": "Source System"
                              },
                              {
                                "columnId": "Count",
                                "label": "Cancellation Count​"
                              }
                            ]
                          },
                          "sortBy": [
                            {
                              "itemKey": "Program_s",
                              "sortOrder": 1
                            }
                          ]
                        },
                        "customWidth": "0",
                        "name": "CancelledProgramQuery",
                        "styleSettings": {
                          "maxWidth": "100%"
                        }
                      }
                    ]
                  },
                  "name": "shortdumpybyproggroup"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Short Dump By User",
                    "expandable": true,
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet sidList = dynamic([{ApplicationSID}]);\r\nlet baseQuery = SapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({ApplicationTimeRange:start}) .. todatetime({ApplicationTimeRange:end}))\r\n| where array_length(sidList) == 0 or SID_s in (sidList)\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| extend E2E_USER_s;\r\nlet timespanCount = baseQuery \r\n| summarize RecordCount=count()\r\n| extend Interval = iff(RecordCount <= 10, timespan(1m), timespan(1m))\r\n| extend Interval = iff(RecordCount > 10 and RecordCount < 50, timespan(5m), Interval)\r\n| extend Interval = iff(RecordCount >= 50 and RecordCount < 100, timespan(10m), Interval)\r\n| extend Interval = iff(RecordCount >= 100 and RecordCount < 150, timespan(15m), Interval)\r\n| extend Interval = iff(RecordCount >= 150, timespan(30m), Interval)\r\n| project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize Count = count() by bin(timestamp_t, timespanInterval), E2E_USER_s",
                          "size": 0,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "barchart",
                          "chartSettings": {
                            "xAxis": "E2E_USER_s",
                            "yAxis": [
                              "Count"
                            ],
                            "showMetrics": false
                          }
                        },
                        "name": "shortdumpbyuser"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let appServerList = dynamic([{ApplicationServer}]);\r\nlet sidList = dynamic([{ApplicationSID}]);\r\nSapNetweaver_ShortDumps_CL\r\n| where timestamp_t between (todatetime({ApplicationTimeRange:start}) .. todatetime({ApplicationTimeRange:end}))\r\n| where array_length(sidList) == 0 or SID_s in (sidList)\r\n| extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat( \"0\", instanceNr_s))\r\n| extend appServer = strcat(hostname_s, \"_\", instanceNr_s)\r\n| where array_length(appServerList) == 0 or appServer in (appServerList)\r\n| summarize Count=count() by E2E_USER_s, SID_s\r\n| order by Count",
                          "size": 0,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "E2E_USER_s",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "Count",
                                "formatter": 1
                              }
                            ],
                            "sortBy": [
                              {
                                "itemKey": "E2E_USER_s",
                                "sortOrder": 1
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "E2E_USER_s",
                                "label": "User "
                              },
                              {
                                "columnId": "SID_s",
                                "label": "Source System"
                              },
                              {
                                "columnId": "Count",
                                "label": "Short Dumps Count"
                              }
                            ]
                          },
                          "sortBy": [
                            {
                              "itemKey": "E2E_USER_s",
                              "sortOrder": 1
                            }
                          ]
                        },
                        "customWidth": "0",
                        "name": "shortdumpbyusers",
                        "styleSettings": {
                          "maxWidth": "100%"
                        }
                      }
                    ]
                  },
                  "name": "shortdumpbyuser"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "SelectedTab",
              "comparison": "isEqualTo",
              "value": "Application"
            },
            "name": "Application Group"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SelectedTab",
          "comparison": "isEqualTo",
          "value": "Application"
        },
        {
          "parameterName": "param_check_error_shortdump",
          "comparison": "isEqualTo",
          "value": "0"
        }
      ],
      "name": "applicationgroup"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}