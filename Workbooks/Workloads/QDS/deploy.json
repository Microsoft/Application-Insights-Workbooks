{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageLink": {
      "type": "string"
    }
  },
  "variables": {
    "workbooks": [
      "QueryWaits",
      "LogAlertRule",
      "LogAlertRules",
      "Database",
      "ManagedInstance",
      "Blocking",
      "Metrics",
      "Queries",
      "Errors",
      "Timeouts",
      "Blockings",
      "DatabaseWaits",
      "AlertRule",
      "Deadlocks",
      "Query",
      "SQLAnalytics",
      "ManagedInstanceDatabase"
    ],
    "workbookNames": {
      "QueryWaits": "[guid(resourceGroup().id, 'Query Waits')]",
      "LogAlertRule": "[guid(resourceGroup().id, 'Log Alert Rule')]",
      "LogAlertRules": "[guid(resourceGroup().id, 'Log Alert Rules')]",
      "Database": "[guid(resourceGroup().id, 'Database')]",
      "Query": "[guid(resourceGroup().id, 'Query')]",
      "AlertRules": "[guid(resourceGroup().id, 'Alert Rules')]",
      "ManagedInstance": "[guid(resourceGroup().id, 'Managed Instance')]",
      "ManagedInstanceDatabase": "[guid(resourceGroup().id, 'Managed Instance Database')]",
      "Blocking": "[guid(resourceGroup().id, 'Blocking')]",
      "Metrics": "[guid(resourceGroup().id, 'Metrics')]",
      "Queries": "[guid(resourceGroup().id, 'Queries')]",
      "Errors": "[guid(resourceGroup().id, 'Errors')]",
      "Timeouts": "[guid(resourceGroup().id, 'Timeouts')]",
      "Blockings": "[guid(resourceGroup().id, 'Blockings')]",
      "DatabaseWaits": "[guid(resourceGroup().id, 'Database Waits')]",
      "AlertRule": "[guid(resourceGroup().id, 'Alert Rule')]",
      "Deadlocks": "[guid(resourceGroup().id, 'Deadlocks')]",
      "SQLAnalytics": "[guid(resourceGroup().id, 'SQL Analytics')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[variables('workbooks')[copyIndex()]]",
      "properties": {
        "templateLink": {
          "uri": "[concat(parameters('storageLink'), '/', variables('workbooks')[copyIndex()], '.json')]"
        },
        "mode": "Incremental",
        "parameters": {
          "workbookNames": { "value": "[variables('workbookNames')]" }
        }
      },
      "copy": {
        "count": "[length(variables('workbooks'))]",
        "name": "wbLoop"
      }
    }
  ]
}